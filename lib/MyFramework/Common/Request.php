<?php
namespace MyFramework\Common;

class Request {

	protected $server  = array();

	protected $controller;
	protected $action;
	protected $id;
	protected $filters = array();
	protected $data;
	protected $files;

	public function __construct($server, $post, $files) {
		$this->server = $server;
		$this->data   = $post;
		$this->files  = $files;

		$this->extract();
	}

	public function __get($var) {
		return $this->$var;
	}


	protected function extract() {

		if(!empty($this->server['SCRIPT_NAME'])) {
			// e.g. /index.php or /admin/index.php (if in sub-directory)
			$scriptPath = explode(DS, $this->server['SCRIPT_NAME']);
			// remove empty value generated by leading /
			if(isset($scriptPath[0]) && empty($scriptPath[0])) {
				array_shift($scriptPath);
			}
			// pop index.php off the end
			array_pop($scriptPath);
		} else {
			$scriptPath = array();
		}

		if(!empty($this->server['REDIRECT_URL'])) {
			// e.g. /controller/action/1/param:123 or /admin/controller/action/1/param:123 (if in sub-directory)
			$redirect = explode(DS, $this->server['REDIRECT_URL']);
		} elseif(!empty($this->server['REQUEST_URI'])) {
			$redirect = explode(DS, $this->server['REQUEST_URI']);
		} else {
			$redirect = array();
		}
		// remove empty value generated by leading /
		if(isset($redirect[0]) && empty($redirect[0])) {
			array_shift($redirect);
		}

		// remove sub-directory from query
		$query = array_merge(array_diff($scriptPath, $redirect), array_diff($redirect, $scriptPath));

		// extract requested controller
		if(!empty($query)) {
			$param  = array_shift($query);
			if(strpos($param, ':') || empty($param)) {
				// it's a param, and not a controller
				if(!empty($param)) {
					array_unshift($query, $param);
				}
				$this->controller = 'Pages';
			} else {
				// sanitise controller name
				$param = preg_replace('/[^a-zA-Z_\-]/', '', $param);

				// turn underscored names into CamelCase
				$param = str_replace(' ', '', ucwords(str_replace(array('-', '_'), ' ', $param)));
				// check for a valid name
				if(!preg_match(CAMEL_CASE, $param)) {
					throw new \MyFramework\Exception\ControllerNotValidException($param);
				}
				// set the requested controller (Class) name
				$this->controller = $param;
			}
		} else {
			// default controller is Pages
			$this->controller = 'Pages';
		}

		// extract requested action
		if(!empty($query)) {

			$param  = array_shift($query);
			if(strpos($param, ':') || empty($param)) {
				// it's a param, and not an action
				if(!empty($param)) {
					array_unshift($query, $param);
				}
				$this->action = 'index';
			} else {
				// sanitise controller name
				$param = preg_replace('/[^a-zA-Z_-]/', '', $param);
				// turn underscored names into CamelCase
				$param = lcfirst(str_replace(' ', '', ucwords(str_replace(array('-', '_'), ' ', $param))));
				// check for a valid name
				if(!preg_match(CAMEL_BACK, $param)) {
					throw new \MyFramework\Exception\ActionNotValidException($param);
				}
				// set the requested action (method) name
				$this->action = $param;
			}
		} else {
			// default action is index
			$this->action = 'index';
		}

		// extract id
		if(!empty($query)) {
			$param  = array_shift($query);
			if(strpos($param, ':') || empty($param)) {
				// it's a param, and not an id
				if(!empty($param)) {
					array_unshift($query, $param);
				}
			} else {
				// sanitise id - numeric or uuid
				$id = preg_replace('/[^a-fA-F0-9\-]/', '', $param);
				// check for valid id
				if(!is_numeric($id) && !preg_match(UUID, $id)) {
					throw new \MyFramework\Exception\IdNotValidException($id);
				}
				// set the requested id
				$this->id = $id;
			}
		}

		// extract filter(s)
		if(!empty($query)) {
			foreach($query as $param) {
				if(strpos($param, ':')) {

					$param = explode(':', $param, 2);

					if(2 != count($param)) {
						throw new \MyFramework\Exception\FilterNotValidException($param);
					}

					$param[0] = lcfirst(str_replace(' ', '', ucwords(str_replace(array('-', '_'), ' ', $param[0]))));
					if(!preg_match(CAMEL_BACK, $param[0])) {
						throw new \MyFramework\Exception\FilterNotValidException($param[0]);
					}

					$this->filters[$param[0]] = $param[1];
				}
			}
		}

	}
}
